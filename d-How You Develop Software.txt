I start by gathering and documenting the requirements, thinking about various use cases and designing the solution around them. Though it sounds big and enterprisy, in reality I'd just scribble a few statements describing what is it I am trying to build and how exactly I am going to do it. At this stage I spend most of the time trying to understand the requirements. I want to know exactly what I am building. If I am building it for a client, I keep asking questions and reciting my understanding of the problem before it is perfectly clear to both of us that the required knowledge have been transfered from my client to me. I usually ask a lot of stupid questions during this stage, but that's okay, because it's better to look stupid at the beginning of the process than at the end, when nothing works or does.

Then I start coding the infrastructure and writing a bunch of unit tests which must always pass. After that I implement the concrete functionality feature by feature, adding and modifying unit tests as needed. And also modifying and adding to the infrastructure to better fit the implementation. At any point in time I have an executing piece of code. Even if it just pretends to solve the problem.

I also often create smaller throw-away projects to experiments with and test different approaches and technologies or learn how to do something without making a mess in my production code. Those projects usually don't have any UI (unless it's the UI that I am experimenting with). Everything is done through the command line and the standard i/o. And it could be happening at any stage of the process. Like, I might want to try using a particular technology before designing my code around it.

I think my process is tightly following my understanding of the problem. Puzzling pieces always take precedence. Otherwise you're running the risk of having to throw away hours, days or even months of your work and starting from scratch.
